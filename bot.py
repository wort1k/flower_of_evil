import re
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id
from config import Token, Group_id
import time
from datetime import date

emoji_pattern = re.compile(r"^[\U00010000-\U0010ffff\s]+")
siege_participants = {}

def forward(sender, message, reply_to):
        """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ """
        peer_id = 2000000000 + sender
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç {sender}: {message}, reply_to: {reply_to}")
        auth.method("messages.send", {
            "peer_id": peer_id,
            "message": message,
            "random_id": get_random_id(),
            "forward" : f"""{{
                            "peer_id": {peer_id},
                            "conversation_message_ids": [{reply_to[0]}, {reply_to[1]}],
                            "is_reply": false
}}"""
        })

def send_reply(sender, message, reply_to):
        """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ """
        peer_id = 2000000000 + sender
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç {sender}: {message}, reply_to: {reply_to}")
        auth.method("messages.send", {
            "peer_id": peer_id,
            "message": message,
            "random_id": get_random_id(),
            "forward" : f"""{{
                            "peer_id": {peer_id},
                            "conversation_message_ids": [{reply_to}],
                            "is_reply": true
}}"""
        })


def equipment_need(event):
    message_id = event.message.get("conversation_message_id")
    sender = event.chat_id  # ID –±–µ—Å–µ–¥—ã
    lines = message.strip().split("\n")
    reply_message = event.message.get("reply_message")  
    original_message_id = None
    if reply_message:
        original_message_id = reply_message.get("conversation_message_id")
    if reply_message.get("text") != "#–æ—Å–∞–¥–∞":
        forward(sender, "—á—Ç–æ-—Ç–æ —Ç—É—Ç –Ω–µ —á–∏—Å—Ç–æ", original_message_id)
    else:
        if lines:
            item_name = lines[-1].strip()
            item_name = emoji_pattern.sub("", item_name).strip() 
            response_message = f"–ø–µ—Ä–µ–¥–∞—Ç—å {item_name}"
            forward( sender, response_message, [original_message_id, message_id])



def entry_siege(event, match):
    reply_message = event.message.get("reply_message")
    sender = reply_message["from_id"]
    original_message_id = reply_message["conversation_message_id"]
    guild = match.group(1)
    role = match.group(2)  
    power = match.group(3)  
    stat = match.group(4)
    siege_participants[sender] = {
                "guild" : guild,
                "role": role,
                "power": int(power),
                "stat": stat,
                "items": 0
            }
    response_message = (
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞. –û –≤–∞—à–µ–º —É—á–∞—Å—Ç–∏–∏ –≤ –æ—Å–∞–¥–µ {date.today()} –∏–∑–≤–µ—Å—Ç–Ω–æ:\n"
                f"–°—Ç–æ—Ä–æ–Ω–∞: {guild}\n"
                f"–í–∞—à–∞ —Ä–æ–ª—å: {role} (+{power}{stat})"
            )
    send_reply(event.chat_id, response_message, original_message_id)
    print(siege_participants)


def seige_item(event, match_item):
    reply_message = event.message.get("reply_message")
    sender = reply_message["from_id"]
    original_message_id = reply_message["conversation_message_id"]
    item_power = int(match_item.group(1))
    siege_participants[sender]["items"] += item_power
    total_power = siege_participants[sender]["power"]
    extra_power = siege_participants[sender]["items"]
    response_message = (
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞. –û –≤–∞—à–µ–º —É—á–∞—Å—Ç–∏–∏ –≤ –æ—Å–∞–¥–µ {date.today()} –∏–∑–≤–µ—Å—Ç–Ω–æ:\n"
        f"–°—Ç–æ—Ä–æ–Ω–∞: {siege_participants[sender]['guild']}\n"
        f"–í–∞—à–∞ —Ä–æ–ª—å: {siege_participants[sender]['role']} (+{siege_participants[sender]['power']}{siege_participants[sender]['stat']})\n"
        f"–î–æ–ø. –≤–ª–æ–∂–µ–Ω–∏–µ +{extra_power}{siege_participants[sender]['stat']}\n"
        f"–æ–±—â–∞—è —Å–∏–ª–∞: +{total_power+extra_power}{siege_participants[sender]['stat']}\n"
    )
    send_reply(event.chat_id, response_message, original_message_id)

def get_siege_summary():
    total_players = len(siege_participants)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    total_stats = {"‚ö°": 0, "‚ù§": 0, "‚öî": 0}  # –û–±—â–∞—è —Å–∏–ª–∞ –æ—Å–∞–¥—ã
    player_details = []  # –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∏—Ö —Å–∏–ª–æ–π

    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å–∏–ª—ã –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
    for user_id, player in siege_participants.items():
        total_stats[player["stat"]] += player["power"] + player["items"]
        name = get_user_name(user_id)
        player_power = player["power"] + player["items"]
        player_details.append(f"üë§ {name} ‚Äî {player['role']} (+{player_power}{player['stat']})")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–∞
    siege_power_summary = (
        f"‚öîÔ∏è –í –æ—Å–∞–¥–µ —É—á–∞—Å—Ç–≤—É–µ—Ç {total_players} –∏–≥—Ä–æ–∫–æ–≤.\n"
        f"üî∫ –û–±—â–∞—è —Å–∏–ª–∞ –æ—Å–∞–¥—ã:\n"
        f"‚ö° {total_stats['‚ö°']}\n"
        f"‚ù§ {total_stats['‚ù§']}\n"
        f"‚öî {total_stats['‚öî']}"
    )

    player_list_summary = "üìú –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n" + "\n".join(player_details)

    return siege_power_summary, player_list_summary

def get_user_name(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID."""
    try:
        user_info = vk.users.get(user_ids=user_id)[0]
        return f"{user_info['first_name']} {user_info['last_name']}"
    except:
        return f"ID {user_id}"  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç

auth = vk_api.VkApi(token=Token)
vk = auth.get_api()
longPoll = VkBotLongPoll(auth, group_id=Group_id)  
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    for event in longPoll.listen():
        if event.type == VkBotEventType.MESSAGE_NEW and event.from_chat:
            message = event.message.get("text")
            if "–û—Å–∞–¥–Ω—ã–π –ª–∞–≥–µ—Ä—å –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–π —ç–∫–∏–ø–∏—Ä–æ–≤–∫–µ:" in message:
                equipment_need(event)
            
            siege_entry_pattern = re.compile(
                                                r"‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –æ—Å–∞–¥–Ω–æ–º—É –ª–∞–≥–µ—Ä—é –≥–∏–ª—å–¥–∏–∏ (.+?)!\s*"
                                                r"üë§–í–∞—à–∞ —Ä–æ–ª—å: (.+?) \(\+(\d+)(‚ö°|‚ù§|‚öî)\)"
                                            )
            item_transfer_pattern = re.compile(
                                                r"‚úÖ–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –æ—Å–∞–¥–Ω–æ–º—É –ª–∞–≥–µ—Ä—é \(\+(\d+)(‚ö°|‚ù§|‚öî)\)"
                                                )
            match = siege_entry_pattern.match(message)
            if match:
                entry_siege(event, match)
            match_item = item_transfer_pattern.search(message)
            if match_item:
                seige_item(event, match_item)
            if message.lower() == "—Å–∏–ª–∞_–æ—Å–∞–¥—ã":
                siege_power = get_siege_summary()[0]
                send_reply(event.chat_id, siege_power, event.message["conversation_message_id"])
            if message.lower() == "–∏–≥—Ä–æ–∫–∏_–æ—Å–∞–¥—ã":
                siege_power = get_siege_summary()[1]
                send_reply(event.chat_id, siege_power, event.message["conversation_message_id"])
            if message.lower() == "—à–∏–∑–∞":
                send_reply(event.chat_id, "–Ω–∞ –º–µ—Å—Ç–µ", event.message["conversation_message_id"])